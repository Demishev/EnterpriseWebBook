== Chapter 14. Hybrid Applications: HTML + Native API

Both Web and native applications have their pros and cons. Let's start with some of the examples of the native applications that exist today.  

Bank of America's native mobile application allows you to deposit checks by taking a photo of the front and back sides of the check and entering the amount. At the time of this writing, they support iPhones, Android, Windows phones, and iPads. 

Near Field Communication (NFC) technology allows NFC-enabled devices communicate with each other in close distance using radio frequencies. NFC can be used for payments (no need to enter passwords) and data sharing (contacts, photos, et al.). Proliferation of NFC in banking will seriously hurt the credit cards industry. A number of smartphones already support NFC technology (see http://www.nfcworld.com/nfc-phones-list/[http://www.nfcworld.com/nfc-phones-list]). Add one of the existing fingerprint biometrics solutions, and your mobile phone becomes your wallet. 

While native applications have full access to all hardware of the device (e.g. camera, microphone, et al.), they have drawbacks too. For instance, if you want to publish your application at Apple's App Store you have to submit your application in advance and wait for an approval. If a crucial bug is found in your application, even though if you could fix it in a day, you can't put a new version in production until it went through an approval process. Back in 2011 Financial Times decided to stop using native iOS application because Apple wouldn't share the data about their own subscribers. Don't forget that Apple would get their own cut from each Financial Times subscription. 

On one hand it's good to have an ability to publish your latest Web applications on your own servers without the need to ask for a permission. On the other hand, the presence on Apple's iTunes is a good channel for bringing new customers. The publisher of New York magazine is heavily investing into their native application for iPad but the newer versions of their Web applications are as engaging as their native piers. If you Web application has to be discoverable and visible by search engines, Web application are definitely better.

The _hybrid applications_ promise you to have the best of both worlds. A Web application written in HTML/JavaScript has access to the hardware of the mobile device via a third-party library such as PhoneGap.The PhoneGap recompiles HTML/JavaScript code to create a platform specific application with an embedded Web browser where your HTML/JavaScript code will run. The output is a native application that has access to all the hardware of the mobile device and can communicate with your HTML/JavaScript code.

The hybrid applications may be not as responsive as the native ones, and the main dilemma the architects responsible for defining mobile enterprise strategy is setting priorities. If a particular application will be used only by the employees of your organization who are using a limited and defined number of mobile devices and if making them productive is important - develop native applications. Start with developing and deploying your application for the pilot OS (typically iOS 6 or Android 4), and then gradually add support for more  platforms, budget permitting. If you are developing a Web application with relatively simple UI (e.g. Save Sick Child) and supporting a wide variety of unknown consumer devices is crucial (e.g. allow people make donation from any device) - go with HTML5 Web application. 

Consider hybrid application for anything in between, and in this chapter we'll be developing a hybrid version of our Save Sick Child application with PhoneGap framework. To be more specific, we'll access the location services of the smartphone and will use the PhoneGap PayPal plugin to process donations.

TIP: For current list of available PhoneGap plugins for various mobile platforms visit the github repository at https://github.com/phonegap/phonegap-plugins[https://github.com/phonegap/phonegap-plugins].

=== What's PhoneGap framework

First of all, PhoneGap is not a competitor of such JavaScript frameworks as jQuery, Ext JS, AngularJS, Ember.js and the like. PhoneGap can be used in addition to any of these frameworks or simply from JavaScript, and its main goal is to provide the JavaScript API for getting access to the hardware of mobile devices. 

****

NOTE: PhoneGap is a brand own by Adobe. Apache Foundation has an open source project called Cordova, which started from the code donated by Adobe to Apache. Now lots of developers can work on Cordova, but Adobe's using the same library to create their own product under the name PhoneGap. The closest analogy is the  Chrome and Safari browsers built on the same open source rendering engine Webkit.  

****



 