== Using AJAX and JSON

This chapter is about bringing the external data to HTML Web pages. In the previous chapters we've been using only hard-coded data - our goal was to see how to layout the Web page and how to change the layout in case some events have happened, e.g. the user clicked on the menu button. Now we'll make sure that our single-page application Save Sick Child can request the data from the external sources and send them the data too. This comes down to two questions:

1. How an HTML Web page can exchange the data with external data sources?
2. What format to use for presenting the application data?

While there could be different answers to these questions, we'll be using AJAX techniques as an answer to the first question and JSON data format as an answer to the second one. We'll start this chapter with explaining why AJAX and JSON are appropriate choice for the Save Sick Child Web application and many others.

=== Why AJAX

If a user points her Web browser to one URL and then changes it to another, the new request will be sent to the new URL, and the new page will arrive and will be rendered by the browser. The URL may have been changed not because the user decided to enter a new one, but simply because the user selected a menu item that resulted in bringing a new Web page to the Web browser. This was pretty much the only way Web sites were designed in the 90th. 

Back in 1999, Microsoft decided to create a Web version of Outlook - their popular eMail application. Their goal was to be able to modify the Input folder as the new emails arrive, but without refreshing the entire content of the Web page. They created an ActiveX control called XMLHTTP that lived inside Internet Explorer 5 and could make requests to the remote servers receiving data without the need to refresh the entire Web page. Such a Web Outlook client would would make periodic requests to the mail server, and if the new mail arrived the application would insert the new row on the top of the Inbox by direct change of the DOM object from JavaScript. 

In early 2000th, other Web browsers adopted this model and created their own XMLHTTPRequest objects, that could asynchronously query remote servers. Google created their famous We client GMail and Map Web applications.  In 2005 Jesse James Garret wrote an article titled "AJAX: A New Approach to Web Applications". The Web developer community liked the term AJAX, which stand for Asynchronous JavaScript and XML, and this gave a birth to the new breed of Web applications that could update the content of just the portion of a Web page without re-retrieving the entire page. Interestingly enough, that last letter in the AJAX acronym stands for XML, while realistically presenting the data in the XML form is not required, and is seldom used as a data format in the client-server exchanges. JSON is used a lot more often to represent the data, but apparently AJAJ didn't sound as good as AJAX.

Visit the http://www.google.com/finance[Google Finance] or http://finance.yahoo.com/[Yahoo! Finance] Web pages when the stock market is open, and you'll see how the price quotes or other financial indicators  are changing while the most of the content remains the same. This gives an illusion of the server pushing the data to your Web client. But most likely, it not a data push but rather periodic _polling_ of the server's data using AJAX. In the modern Web applications we expect to see more of the real server side data push using HTML5 WebSockets API, which is described in details in Chapter 9 of this book.


=== Why JSON

JSON stands for JavaScript Object Notation. It's a more compact than XML way to represent the data. Besides, all modern Web Browsers understand and can parse JSON data. After learning the JavaScript object literals in Chapter 2, you'll see that the presenting the data in JSON notation is almost the same as writing JavaScript object literals.


<<FIG4-1>> depicts a high level view of a typical Web application.


[[FIG2-14]]
.Anatomy of a Web application
image::images/fig_04_01.png[]
