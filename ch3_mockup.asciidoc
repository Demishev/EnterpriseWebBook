== Chapter 3. Mocking Up the Application «Save Sick Child»

The time has come to start working on our Web application Save Sick Child. It's going to be a Web site that will supports donations to sick children, show some video, integrate the Google maps, and include the online auction. The goal is to gradually build all the functionality of the Web site while explaining each step of the way and giving you the reasons why we are building it the way we do. By the end of this chapter the Web design and the first prototype of the Save Sick Child site will be ready.

The proliferation mobile devices, Internet connectivity and Web applications require new skills for development of what was known as boring-looking enterprise applications. In the past, development of the user interface of most of the software applications was done by developers to the best of their design abilities: a couple of buttons here, a grid there, a gray background.  The business users were happy cause they did not see any better. The application delivers the data – what else to wish for?  Enterprise business users used to be happy with whatever UI were given to them as long as the application helped them to take care of their business. 

But todays business users are spoiled by nice looking consumers applications and more often than not new development starts with inviting a Web designer who should create a prototype of the future application.  We’ve seen excellent (from the UI perspective) functional specificatoins for financial applications made by professional designers.  Business users slowly but surely become first-class citizens! The trend is clear: developer’s art does not cut it anymore.  You need to hire a professional Web designer for your next Web application. The software developers are not overly familiar with the tools that Web designers are using. This chapter should raise the curtain on the designers role in creating the UI for a Web application. 

Our Web designer, let's call him Alex, is ready to start working on the _mockup_ (a.k.a. _wireframes_) - a set of images depicting various views of our Save Sick Child application. We expect him to deliver images with comments that would briefly explain what should change in a view if a user will make a certain action,
e.g. clicks on the button. You can also think of a UI of an application as a set of states, and the user’s action result in your application’s transition from one state to the other. As nerds and mathematicians say
UI of your application is a http://en.wikipedia.org/wiki/State_machine[finite state machine]", which at any given point of time is in one of the finite number of states, for example, in the view state Donate Form.

=== Mobile First?

While starting working on the design of the new Web application keep in mind that most likely some users will access it from mobile devices. Will the proposed UI look good on the mobile devices with smaller screens? Some people suggest using so-called "Mobile First" approach. For example, take the geographical location services. The users of iPhones and Android based devices are used to the fact that they can find the closest restaurant or a gas station based on their current location. Do you know that location feature can be available on the desktops too? Google maps API can find the location of the user's desktop based on its IP address - it won't be as precise as with the smartphones but it may be good enough. So why not plan for adding this feature to all versions of your Web application?  Finding a sick child located in your region doesn't have to be as precise as GPS.

Or let's consider pointing devices. At the time of this writing, vast majority of the desktop users work with pixel-perfect mouse pointers or track pads. SmartPhone or tablet users work with fingers. One finger touch can cover a square with 100 pixels. The CNN site shows lots of news links located very close to each other on the screen. A finger may cover more than one link, and Android devices offer you a larger popup allowing you to select the link you really want to touch. Having the "Mobile first" state of mind doesn't mean that CNN would need to keep the larger distance between the links for all the users. But this means that they should foresee the issues or innovate using the features offered by modern mobile devices. 

In Chapter 11 we'll discuss the _responsive design_ techniques that allow to create the UI for Web applications that automatically re-allocate the screen content based on the screen size of the user's device. Although this chapter is about the desktop version of the Sick Child Web application, its screen will consist of several rectangular areas that can be allocated differently (or even hidden) on smartphones or tablets. 

One of the constraints that the mobile users have is the relatively slow speed of the mobile Internet. This means that even though your desktop users will use fast LAN connection lines, your Web application has to be modularized and only the minimal number modules has to be loaded initially. Often mobile providers charge the user based on the amount of consumed data too.

The chances are slim that the desktop users will lose the Internet connection for a long period of time. On the other hand, the mobile users may stay in the area with no or spotty connection. In this case the "Mobile First" thinking can lead to introducing an offline mode with limited functionality. 

Thinking upfront of the minimal content to be displayed on a small mobile screens may force you to change the design of the desktop Web pages too. In our sample Save Sick Child application we need to make sure that there is a space for the Donate button even on the smallest devices.


=== Introducing Balsamiq Mockups

Visualize a project owner talking to Alex in a cafeteria, and Alex is drawing sketches of the future Web site on a napkin. Well, in the 21st Century he’ll use an electronic napkin so to speak - an excellent prototyping tool called http://balsamiq.com[Balsamiq Mockups]. This easy to use program gives you a working area where you create a mockup of your future Web application by dragging and dropping the required UI components from the toolbar onto the image of the Web page (see <<FIG3-1>>).

[[FIG3-1]]
.The working area of Balsamiq Mockups
image::images/fig_03_01.jpg[image]

TIP: If you can't find the required image in Balsamiq's library, add your own by dragging and dropping it onto the top toolbar. For example, the mockup in Chapter 11 uses our images of the iPhone that we've added to Balsamiq assets.

When the prototype is done, it can be saved as an image and sent to the project owner. Another option is to export the Balsamiq project into XML, and if both the project owner and Web designer have Balsamiq installed, they can work on the prototype in collaboration. For example, the designer exports the current states of the project, the owner imports it and makes corrections or comments, then exports it again and sends it back to the designer.

=== The Project Owner Talks to a Web Designer

During the first meeting Alex talks to the project owner discussing the required functionality and then creates the UI to be implemented by Web developers. The artifacts produced by the designer vary depending on the qualifications of the designer. This can be a set of images representing different states of the UI with little _callouts_ explaining the navigation of the application. If the Web designer is familiar with HTML and CSS, developers may get a working prototype in the form of HTML and CSS files, and this is exactly what Alex will create by the end of this chapter.

Our project owner said to Alex: _"The Save Sick Child Web site should allow people to make donations to sick children. The users should be able to find these children by specifying a geographical area on the map. The site should be integrated with a payment system, include a video player and display statistics about the donors and recipients. The site should include an online auction with proceeds going to charity. We'll start working on the desktop version of this site first, but your future mockup should include three versions of the UI supporting desktops, tablets, and smartphones"_.

After the meeting Alex launched Balsamiq and started to work. He decided that the main window will consist of four areas laid out vertically: 

1. The header with the logo and several navigation buttons 
2. The main area with the Donate support plus the video player 
3. The area with the Find Local Kid, statistics, and charts. 
4. The footer with several house-holding links plus the icons for Twitter and FaceBook.

=== The First Mockups

The first deliverable of our Web designer (see <<FIG3-2>> and <<FIG3-3>>) depicted two states of the UI: before and after clicking the button Donate Now. The Web designer suggested that on the button click the Video Player would turn into a small button revealing the donation form.

[[FIG3-2]]
.The main view before clicking Donate Now. Take 1.
image::images/fig_03_02.png[]


[[FIG3-3]]
.The main view after clicking Donate Now. Take 1.
image::images/fig_03_03.png[]

The project owner suggested that turning the video into a Donate button may not be a the best solution. We shouldn’t forget that the main goal of this application is collecting donation, so they decided to keep the user's attention on the button Donate and move the video player to the lower portion of the window. The next version of the mockup looks as shown in <<FIG3-4>> and <<FIG3-5>>. The latter shows different UI states should the user decide to log in.

[[FIG3-4]]
.The main view. Take 2.
image::images/fig_03_04.png[]

Next comes authorization. The view states in this process are: 
1. Not Logged On 
2. The Login Form 
3. Wrong ID/Password 
4. Forgot Password 
5. Successfully Logged On

The Web designer has to create a mockup for each of these states. The project owner will review them and return them back to Alex with some comments. <<FIG3-5>> illustrates selected views from authorization. Due
to some miscommunication the Web designer assumed that unless the user log on to the application, she won’t be able to access the Web site. This is clearly wrong as the process of making donations has to be as easy as possible, and forcing the donor to log on may scare some people away.

[[FIG3-5]]
.Selected authorization UI states
image::images/fig_03_05.png[]

=== From Mockup to HTML Prototype

We are lucky - Alex knows HTML and CSS. He's ready to turn the still mockups into the first working prototype. It'll use only hard-coded data but the layout of the site will be done in CSS and we’ll use HTML5 markup.

****

NOTE: Authors of this book assume that the users of our "Save Sick Child" site work with the modern versions of Web browsers (two year old or younger). The real world Web developers need to deal with finding workarounds to the unsupported CSS or HTML5 features in the old browsers, but modern IDE generate HTML5 boilerplate code that include large CSS files providing different solutions to older browsers. JavaScript frameworks implement workaround for features unsupported by old browsers too, so we don't want to clutter the text providing several versions of the code just to make book samples work in outdated browsers.

****

This chapter will include a lot of sample code illustrating how the UI is gradually being built.  We've created a number of Aptana projects and each of them can be run independently. Create a new workspace in Aptana Studia (File | Switch Workspace) and import all these projects from ch2.zip in one shot (File | Import | General | Exiting projects into Workspace ). After that you'll be able to run each of these examples by right-clicking on the index.html and selecting Run as | JavaSecript Web Application.



=== Adding Styles With CSS


We’ve been using some CSS in short code samples in Chapter 2, and now let’s apply styles to make Save Sick Child look as in the mockup. We’ve been using some CSS in short code samples from Chapter 2, and now it's time to apply styles to make Save Sick Child look as in the mockup.
