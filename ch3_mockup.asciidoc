== Chapter 3. Mocking Up the Application «Save Sick Child»

The time has come to start working on our Web application Save Sick Child. It's going to be a Web site that will supports donations to sick children, show some video, integrate the Google maps, and include the online auction. The goal is to gradually build all the functionality of the Web site while explaining each step of the way and giving you the reasons why we are building it the way we do. By the end of this chapter the Web design and the first prototype of the Save Sick Child site will be ready.

The proliferation mobile devices, Internet connectivity and Web applications require new skills for development of what was known as boring-looking enterprise applications. In the past, development of the user interface of most of the software applications was done by developers to the best of their design abilities: a couple of buttons here, a grid there, a gray background.  The business users were happy cause they did not see any better. The application delivers the data – what else to wish for?  Enterprise business users used to be happy with whatever UI were given to them as long as the application helped them to take care of their business. 

But todays business users are spoiled by nice looking consumers applications and more often than not new development starts with inviting a Web designer who should create a prototype of the future application.  We’ve seen excellent (from the UI perspective) functional specificatoins for financial applications made by professional designers.  Business users slowly but surely become first-class citizens! The trend is clear: developer’s art does not cut it anymore.  You need to hire a professional Web designer for your next Web application. The software developers are not overly familiar with the tools that Web designers are using. This chapter should raise the curtain on the designers role in creating the UI for a Web application. 

Our Web designer, let's call him Alex, is ready to start working on the _mockup_ (a.k.a. _wireframes_) - a set of images depicting various views of our Save Sick Child application. We expect him to deliver images with comments that would briefly explain what should change in a view if a user will make a certain action,
e.g. clicks on the button. You can also think of a UI of an application as a set of states, and the user’s action result in your application’s transition from one state to the other. As nerds and mathematicians say
UI of your application is a http://en.wikipedia.org/wiki/State_machine[finite state machine]", which at any given point of time is in one of the finite number of states, for example, in the view state Donate Form.

=== Mobile First?

While starting working on the design of the new Web application keep in mind that most likely some users will access it from mobile devices. Will the proposed UI look good on the mobile devices with smaller screens? Some people suggest using so-called "Mobile First" approach. For example, take the geographical location services. The users of iPhones and Android based devices are used to the fact that they can find the closest restaurant or a gas station based on their current location. Do you know that location feature can be available on the desktops too? Google maps API can find the location of the user's desktop based on its IP address - it won't be as precise as with the smartphones but it may be good enough. So why not plan for adding this feature to all versions of your Web application?  Finding a sick child located in your region doesn't have to be as precise as GPS.

Or let's consider pointing devices. At the time of this writing, vast majority of the desktop users work with pixel-perfect mouse pointers or track pads. SmartPhone or tablet users work with fingers. One finger touch can cover a square with 100 pixels. The CNN site shows lots of news links located very close to each other on the screen. A finger may cover more than one link, and Android devices offer you a larger popup allowing you to select the link you really want to touch. Having the "Mobile first" state of mind doesn't mean that CNN would need to keep the larger distance between the links for all the users. But this means that they should foresee the issues or innovate using the features offered by modern mobile devices. 

In Chapter 11 we'll discuss the _responsive design_ techniques that allow to create the UI for Web applications that automatically re-allocate the screen content based on the screen size of the user's device. Although this chapter is about the desktop version of the Sick Child Web application, its screen will consist of several rectangular areas that can be allocated differently (or even hidden) on smartphones or tablets. 

One of the constraints that the mobile users have is the relatively slow speed of the mobile Internet. This means that even though your desktop users will use fast LAN connection lines, your Web application has to be modularized and only the minimal number modules has to be loaded initially. Often mobile providers charge the user based on the amount of consumed data too.

The chances are slim that the desktop users will lose the Internet connection for a long period of time. On the other hand, the mobile users may stay in the area with no or spotty connection. In this case the "Mobile First" thinking can lead to introducing an offline mode with limited functionality. 

Thinking upfront of the minimal content to be displayed on a small mobile screens may force you to change the design of the desktop Web pages too. In our sample Save Sick Child application we need to make sure that there is a space for the Donate button even on the smallest devices.

=== Introducing Balsamiq Mockups

Visualize a project owner talking to Alex in a cafeteria, and Alex is drawing sketches of the future Web site on a napkin. Well, in the 21st Century he’ll use an electronic napkin so to speak - an excellent prototyping tool called http://balsamiq.com[Balsamiq Mockups]. This easy to use program gives you a working area where you create a mockup of your future Web application by dragging and dropping the required UI components from the toolbar onto the image of the Web page (see <<FIG3-1>>).

[[FIG3-1]]
.The working area of Balsamiq Mockups
image::images/fig_03_01.jpg[image]

TIP: If you can't find the required image in Balsamiq's library, add your own by dragging and dropping it onto the top toolbar. For example, the mockup in Chapter 11 uses our images of the iPhone that we've added to Balsamiq assets.

When the prototype is done, it can be saved as an image and sent to the project owner. Another option is to export the Balsamiq project into XML, and if both the project owner and Web designer have Balsamiq installed, they can work on the prototype in collaboration. For example, the designer exports the current states of the project, the owner imports it and makes corrections or comments, then exports it again and sends it back to the designer.

=== The Project Owner Talks to a Web Designer

During the first meeting Alex talks to the project owner discussing the required functionality and then creates the UI to be implemented by Web developers. The artifacts produced by the designer vary depending on the qualifications of the designer. This can be a set of images representing different states of the UI with little _callouts_ explaining the navigation of the application. If the Web designer is familiar with HTML and CSS, developers may get a working prototype in the form of HTML and CSS files, and this is exactly what Alex will create by the end of this chapter.

Our project owner said to Alex: _"The Save Sick Child Web site should allow people to make donations to sick children. The users should be able to find these children by specifying a geographical area on the map. The site should be integrated with a payment system, include a video player and display statistics about the donors and recipients. The site should include an online auction with proceeds going to charity. We'll start working on the desktop version of this site first, but your future mockup should include three versions of the UI supporting desktops, tablets, and smartphones"_.

After the meeting Alex launched Balsamiq and started to work. He decided that the main window will consist of four areas laid out vertically: 

1. The header with the logo and several navigation buttons 
2. The main area with the Donate support plus the video player 
3. The area with the Find Local Kid, statistics, and charts. 
4. The footer with several house-holding links plus the icons for Twitter and FaceBook.

=== First Mockups

The first deliverable of our Web designer (see <<FIG3-2>> and <<FIG3-3>>) depicted two states of the UI: before and after clicking the button Donate Now. The Web designer suggested that on the button click the Video Player would turn into a small button revealing the donation form.

[[FIG3-2]]
.The main view before clicking Donate Now
image::images/fig_03_02.png[]


[[FIG3-3]]
.The main view after clicking Donate Now 
image::images/fig_03_03.png[]

The project owner suggested that turning the video into a Donate button may not be a the best idea. We shouldn’t forget that the main goal of this application is collecting donation, so they decided to keep the user's attention on the Donate area and move the video player to the lower portion of the window. 

After that they went over the mockups of the authorization routine. The view states in this process can be : 
1. Not Logged On 
2. The Login Form 
3. Wrong ID/Password 
4. Forgot Password 
5. Successfully Logged On

The Web designer has created mockups of some of these states as shown on  <<FIG3-4>> and <<FIG3-5>>. 

[[FIG3-4]]
.The user haven't clicked on the Login button
image::images/fig_03_04.png[]

The latter shows different UI states should the user decide to log in. The project owner reviewed the mokups and return them back to Alex with some comments. The project owner wanted to make sure that the user doesn't have to log on to the application to access the Web site. The process of making donations has to be as easy as possible, and forcing the donor to log on may scare some people away, so the project owner left his comment as shown on <<FIG3-5>>.

[[FIG3-5]]
.The user haven't clicked on the Login button
image::images/fig_03_05.png[]

=== From Mockups to a Prototype

We are lucky - Alex knows HTML and CSS. He's ready to turn the still mockups into the first working prototype. It'll use only hard-coded data but the layout of the site will be done in CSS and we’ll use HTML5 markup.

****

NOTE: Authors of this book assume that the users of our "Save Sick Child" site work with the modern versions of Web browsers (two year old or younger). The real world Web developers need to deal with finding workarounds to the unsupported CSS or HTML5 features in the old browsers, but modern IDE generate HTML5 boilerplate code that include large CSS files providing different solutions to older browsers. JavaScript frameworks implement workaround for features unsupported by old browsers too, so we don't want to clutter the text providing several versions of the code just to make book samples work in outdated browsers.

****

This chapter will include a lot of sample code illustrating how the UI is gradually being built.  We've created a number of Aptana Studio projects and each of them can be run independently. Create a new workspace in Aptana Studio (File | Switch Workspace) and import all these projects from ch3.zip in one shot (File | Import | General | Exiting projects into Workspace ). After that you'll be able to run each of these examples by right-clicking on the index.html and selecting Run as | JavaScript Web Application.


=== Bringing Life to the Mockup

In this section you'll see several Aptana projects that show how the static mockup will turn into a working prototype with the help of HTML, CSS, and JavaScript. Alex, the designer, decided to have four separate areas on the page hence he created the HTML file index.html that has the tag `<header>` with the navigation tag `<nav>`, two `<div>` tags for the middle sections of the page and a `<footer>`:

[source, html]
----
<!DOCTYPE html>
<html lang="en">
 <head>
	<meta charset="utf-8">
	<title>Save Sick Child | Home Page</title>
	<link rel="stylesheet" href="css/styles.css">
 </head>
 <body>
	<div id="main-container">
		<header>
		 <h1>Save Sick Child</h1>
		 <nav>
		  <ul>
			<li>
			  <a href="javascript:void()">Who we are</a>
			</li>
			<li>
			  <a href="javascript:void()">What we do</a>
			</li>
			<li>
			  <a href="javascript:void()">Way to give</a>
			</li>
			<li>
			  <a href="javascript:void()">How we work</a>
			</li>
		  </ul>
		 </nav>
		</header>
		<div id="main" role="main">
			<section>
			  Donate section and Video Player go here
			</section>
			<section>
			  Locate sick child, stats and tab folder go here
			</section>
		</div>
		<footer>
			<section id="temp-project-name-container">
				<b>project 01</b>: This is the page footer
			</section>
		</footer>
	</div>
 </body>
</html>
----

Note that the above HTML includes the CSS file shown below using the `<link>` tag. Since there is no content yet for the navigation links to open, we use the syntax `href="javascript:void()` that allows to create a live link that doesn't load any page, which is fine on the prototyping stage. 

[source, css]
----
/* Navigation menu */
nav {
	float: right
}
nav ul li {
	list-style: none;
	float: left;
}
nav ul li a {
	display: block;
	padding: 7px 12px;
}

/* Main content 
 #main-container is a wrapper for all page content
 */
#main-container {
	width: 980px;
	margin: 0 auto;
}
div#main {
	clear: both;
}

/* Footer */
footer {
	/* Set background color just to make the footer standout*/
	background: #eee;
	height: 20px;
}
footer #temp-project-name-container {
	float: left;
}
----
The above CSS controls not only the styles of the page content, but also that sets the page layout. The `<nav>` section should be pushed to the right. If an unordered list is placed inside the `<nav>`, it should be left aligned. The width of the HTML container with ID `main-container` should be 980 pixels, and it has to be automatically centered. The footer will be 20 pixels high and should have a gray background. The first version of our Web page is shown on <<FIG3-6>>

TIP: In Chapter 11 you'll see how to create Web pages with more flexible layouts that don't require specifying absolute sizes in pixels.

[[FIG3-6]]
.Working prototype. Take 1: Getting Started.
image::images/fig_03_06.png[]


The next version of our prototype is a lot more interesting and it will contain a lot more code. First of all, the CSS file will become fancier, the layout of the four page sections will properly divide the screen real estate. We'll add a Logo and a nicely styled Login button to the top of the page. This version of the code will also introduce some JavaScript supporting user's authorization. Run the Aptana project project-02-login, and you'll see a window similar to <<FIG3-7>>.

[[FIG3-7]]
.Working prototype. Take2: Login.
image::images/fig_03_07.png[]

The new Aptana project created by Alex has several directories to keep JavaScript, images, CSS, and fonts separately. While we are not overly interested in the fonts used in this prototypes, let's take a close look at the HTML code. The first thing worth mentioning is that we started using a special JavaScript library called http://modernizr.com/[Modernizr]. This is a must have feature detection library that helps your application to figure out if the user's browser supports certain HTML5/CSS3 features, and we'll spend a moment explaining how the Modernizer work a bit later. For now just note that the HTML code below includes two `<script>` sections - the Modernizr's JavaScript gets loaded first, while our own main.js is loaded at the end of the `<body>` section.

[source, html]
----
<!DOCTYPE html>
<html class="no-js" lang="en">
 <head>
 	<meta charset="utf-8">
 	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
 	<title>Save Sick Child</title>
 	<link rel="stylesheet" href="assets/css/styles.css">
 	
 	<!-- All JavaScript at the bottom, except for Modernizr.-->
 	<script src="assets/js/libs/modernizr-2.5.3.min.js"></script>
 	
 </head>
  <body>
 	<div id="main-container">
 	 <header>
 	  <h1 id="logo"><a href="javascript:void(0)">Save Sick Child</a></h1>
 	   <nav id="top-nav">
 	  	<ul>
 	  	  <li id="login">
 	  	 	<div id="authorized">
 	  	 		<span class="icon-user authorized-icon"></span>
 	  	 		<span id="user-authorized">admin</span>
 	  	 		<br/>
 	  	 		<a id="profile-link" href="javascript:void(0);">profile</a> | 
 	  	 		<a id="logout-link" href="javascript:void(0);">logout</a>
 	  	 	</div>

 	  	 	<form id="login-form">
 	  	 		<span class="icon-user login-form-icons"></span>
 	  	 		<input id="username" name="username" type="text" 
 	  	 		            placeholder="username" autocomplete="off" />
 	  	 		&nbsp; <span class="icon-locked login-form-icons"></span>
 	  	 		<input id="password" name="password" 
 	  	 		            type="password" placeholder="password"/>
 	  	 	</form>
 	  	 	<a id="login-submit" href="javascript:void(0)">login &nbsp;
 	  	 	        <span class="icon-enter"></span> </a>
 	  	 	<a id="login-link" class="show-form" 
 	  	 	                   href="javascript:void(0)">login &nbsp;
 	  	 		<span class="icon-enter"></span> </a>

 	  	 	<div class="clearfix"></div>
 	  	 </li>
 	  	 <li id="top-menu-items">
 	  	 	<ul>
 	  	 		<li>
 	  	 			<a href="javascript:void(0)">Who We Are</a>
 	  	 		</li>
 	  	 		<li>
 	  	 			<a href="javascript:void(0)">What We Do</a>
 	  	 		</li>
 	  	 		<li>
 	  	 			<a href="javascript:void(0)">Where We Work</a>
 	  	 		</li>
 	  	 		<li>
 	  	 			<a href="javascript:void(0)">Way To Give</a>
 	  	 		</li>
 	  	 	</ul>
 	  	 </li>
 	  	</ul>
 	   </nav>
 	 </header>
 	 
 	 <div id="main" role="main">
 	 	<section id="main-top-section">
 	 		<br/>
 	 		Main content. Top section.
 	 	</section>
 	 	<section id="main-bottom-section">
 	 		Main content. Bottom section.
 	 	</section>
 	 </div>
 	 <footer>
 	 	<section id="temp-project-name-container">
 	 		<b>This is the footer</b>
 	 	</section>
 	 </footer>
 	</div>
 	<script src="assets/js/main.js"></script>
 </body>
</html>
----    

WARNING: Run this project in Aptana and click on the button Login, and you'll see that it reacts. But looking at the login-related `<a>` tags in the code above you'll find nothing but `href="javascript:void(0)"`. So why the button reacts? Read the code in the main.js shown below, and you'll find there line `loginLink.addEventListener('click', showLoginForm, false);` that invokes the callback `showLoginForm()`. That why the Login button reacts! If this seems confusing you can also use `href="#"` instead to keep the link alive.

==== How Modernizr Works

Modernizr is a tiny open source JavaScript library that help your script to figure out if the latest HTML or CSS features are supported by the user's browser. Instead of maintaining complex cross-browser feature matrix to see if, say `border-radius` is supported, the Modernizer queries the `<html>` elements to see what's supported and what's not. 

Please note the following fragment from our HTML code: `<html class="no-js" lang="en">`.  For Modernizr to work, your HTML root element has to have the class named `"no-js"`. On page load, the Modernizr will replace the `no-js` class with extended version that lists all detected features, and those that are not supported will get a prefix `no-`.  

[[FIG3-8]]
.Modernizr changed the HTML's class property
image::images/fig_03_08.png[]

Re-running the above HTML code in Firebug replaced the value of the `class` property, and <<Fig 3-8>>  shows that this version of Firefox doesn't support touch events (`no-touch`), websockets (`no-websockets`), et al. But the `borderradius`is supported that's why the CSS property `border-radius: 2px;` for the Login button worked fine.    

[source, html]
----
li#login input {
	width: 122px;
	padding: 4px;
	border: 1px solid #ddd;
	border-radius: 2px;
	-moz-border-radius: 2px;
	-webkit-border-radius: 2px;
}
----

