== Replacing HTTP with WebSockets

[quote, http://ietf.org/mail-archive/web/hybi/current/msg00784.html ]
____
Reducing kilobytes of data to 2 bytes… and reducing latency from 150ms
to 50 ms is far more than marginal. In fact, these two factors alone are
enough to make WebSocket seriously interesting…
____

This chapter will introduce the WebSocket API, which is a part of HTML5 spec. We'll pick one of the data flow in Save a Child site and replace HTTP communication with WebSockets protocol. Using the monitoring tool we'll show the performance bandwidth usage benefits that WebSockets protocol brings to the Web.
This chapter will be based on http://www.youtube.com/watch?v=vP6MfPnE1c0[this WebSockets presentation].

Will use http://java.net/projects/tyrus[Project «Tyrus»] with http://dlc.sun.com.edgesuite.net/glassfish/4.0/promoted/[latest Glassfish builds]

Show the server-side data push with Websockets.  Look at Socket.IO library.  Compary the data throughput with the HTTP datapush demonstrated in Ch4.

=== Legacy Web and its options for «Realtime» apps

- Short Polling
- Long Polling
- Streaming

=== Server-Sent Events

- +eventSource+ API
- Use only when data doesn't need to be sent from the client to the server
- Standardization of server-side push
- Minimal overhead (tens of bytes, not hundreds)
- HTTP based (but requires server support)

[source,javascript]
----
//Create new EventSource
var dataStream = new EventSource("http://www.example.com");

// Add handlers for open and error:
dataStream.onopen = function(evt) {
    console.log("open");
}
dataStream.onerror = function(evt) {
    console.log("error");
};

// Handle messages
dataStream.onmessage = function(evt) {
    // Process message
    console.log("message: " + evt.data);
}

----

=== Introducing Websockets

What is websockets?

[quote,http://peterlubbers.github.com/devcon5-keynote/#38]
____
Clean standardization for complex hacks used to simulate real time, bidirectional communication
____

- IETF Protocol
- Client-side W3C API
    - Websocket Interface

[source,javascript]
----
[Constructor(DOMString url, optional (DOMString or DOMString[]) protocols)]
interface WebSocket : EventTarget {
  readonly attribute DOMString url;

  // ready state
  const unsigned short CONNECTING = 0;
  const unsigned short OPEN = 1;
  const unsigned short CLOSING = 2;
  const unsigned short CLOSED = 3;
  readonly attribute unsigned short readyState;
  readonly attribute unsigned long bufferedAmount;

  // networking
  [TreatNonCallableAsNull] attribute Function? onopen;
  [TreatNonCallableAsNull] attribute Function? onerror;
  [TreatNonCallableAsNull] attribute Function? onclose;
  readonly attribute DOMString extensions;
  readonly attribute DOMString protocol;
  void close([Clamp] optional unsigned short code, optional DOMString reason);

  // messaging
  [TreatNonCallableAsNull] attribute Function? onmessage;
           attribute DOMString binaryType;
  void send(DOMString data);
  void send(ArrayBufferView data);
  void send(Blob data);
};

----

- API

[source,javascript]
----

var ws;
if(window.WebSocket) {   
    output("WebSocket supported in your browser");   

    ws = new WebSocket("ws://www.websockets.org/echo");

    // Set event handlers.
    ws.onopen = function() { output("onopen"); };   

    ws.onmessage = function(e) {     
            // e.data contains received string.
             output("echo from server : " + e.data); };

    ws.onclose = function() { output("onclose"); };
    ws.onerror = function() { output("onerror"); };

} else {
    output("WebSocket not supported in your browser");
}

----

- websocket handshake
    1. client sends +GET+-request for protocol upgrade
    2. server send response and confirms protocol upgrade
    3. +websocket.readyState==1+
    4. +websocket.onmessage+ listener for incoming messages, +websocket.send()+ to send data to server
- websocket frame anatomy
- client-side frameworks
- Server-side API

=== Websocket Use Cases

WebSockets really shine with following applications:

- Live trading/sports ticker
- Controlling medical equipment over the web
- Chat applications
- Multiplayer online games
- Realtime updating social streams

=== Websockets and proxies

TBD

=== WebSockets and HTTP 2.0

[quote, Chief Product Architect at Akamai, Stephen Ludin]
____
"I use the metaphor of hammers and screwdrivers. Both tools are indispensible in my workshop...

Use the right tool for the job.
In the case of page and object delivery use SPDY.
In the case of lightweight or streaming data delivery look to WebSocket."

source: https://blogs.akamai.com/2012/07/spdy-and-websocket-support-at-akamai.html
____

- http 2.0 and spdy
- spdy and websockets
    - framed protocols (describe frames)