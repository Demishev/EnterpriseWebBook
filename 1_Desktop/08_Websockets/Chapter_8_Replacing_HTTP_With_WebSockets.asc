== Chapter 8. Replacing HTTP with WebSockets




[quote, http://ietf.org/mail-archive/web/hybi/current/msg00784.html ]
____
Shaving off hundreds of bytes of HTTP overhead and reducing the latency from 150ms to 50 ms makes WebSocket worthwhile considering for any application.
____

This chapter starts with introducing of existing "legacy" options for creating interactive Web applications. After that we're going to introduce Server-Sent Events (SSE) and WebSockets, which are included in HTML5 specification.

We're going to implement monitoring of the fund-raising events and an interactive auction for our Save Sick Child application using WebSockets and  Server-Sent Events. We'll use Wireshark, a network monitoring tool, to see benefits of using WebSockets protocol.

All server-side functionality supporting this chapter is written in Java, using the http://java.net/projects/tyrus[Project «Tyrus»] with http://dlc.sun.com.edgesuite.net/glassfish/4.0/promoted/[latest Glassfish builds]. If you don't know Java, just treat this server side setup as a service that supports WebSockets. For Java developers interested in diving into the server-side, we'll provide the source code and brief comments as a part of the code samples that come with this book.

TODO: Show the server-side data push with Server-Sent Events and WebSockets. Compare them.
Do a brief overview of the http://socket.io/[Socket.IO] library. Comparing sending data using WebSockets data throughput with the HTTP data push will be demonstrated in Chapter 4.

=== Near Realtime Applications With HTTP

The HTTP protocol is the lingua franca of today's Web  applications, where client-server communications are based on the request-response paradigm. On the low level, Web browsers establish a TCP/IP connection for each HTTP request-response session.  Every time when the browser needs to send data to server and get response back the browser re-establish the TCP/IP connection. So to implement interactiveness in your application currently, there are 3 basic options that developer has to use today to satisfy the real-time client-server communication requirements. Basically, that options provide hacks on top of half-duplex HTTP protocol to simulate real-time behavior. Lets discuss each of them.

==== Short Polling ====

With _short polling_, your client code sends requests to the server every N seconds. The response is «empty» if there is no update as illustrated in Figure 8-1. Visualize a child seating on back seat of your car and asking, "Are we where?" every minute. And you're politely replying "Not just yet" - compare it to a empty server response. There is no valuable payload for this kid, but she's still receiving some "metadata". HTTP polling does the same thing that generates verbose HTTP response headers sending empty payload. Let alone destructing the driver (think the server) from performing other responsibilities.

image:fig_08_01.png[image]

Figure 8-1 Short polling

==== Long Polling ====

_Long polling_ starts similarly to short polling: the client sends HTTP request to server. But in this case instead of sending an empty response (as in case with short polling), server waits till the data for the client becomes available. If the requested information is not available after the specified timeout, the server server sends an empty response to the client and closes the connection.

We'll give you one more analogy to compare short and long polling. Imagine a party at the top floor of a building equipped with a smart elevator that goes up every minute and opens the door just in case if one of the guests wants to go down to smoke a cigarette. If no one enters the elevator, it goes to the ground level and in 60 seconds goes up again. This is the short polling scenario. But if this elevator would go up, and waited till someone would actually decided to go down, then we could call it a long polling mode.

From HTTP specification perspective this "hack" is legit: long polling server behavior indistinguishable from the «slow» server.  That is why this technique also referred as "Hanging GET". If you see an online auction that automatically modifies the prices as people bid on the item it looks as if the server pushes the data to you. But most likely, this functionality was implemented using long polling, which is not a real server-side data push, but its emulation.

image:fig_08_02.png[image]

Figure 8-2 Long polling

TODO Compare pros and cons of long vs short polling

==== HTTP Streaming ====

Client sends the request, server wait for events and  streams +multipart/chunked+ response, and then waits for the events. The server pushes the data to the client pretending that the response never ends. The response is continually appended by the server, usually with `<script>` what gets executed even after the HTTP DOM object is ready

image:fig_08_03.png[image]

Figure 8-3 HTTP streaming

Polling and streaming can be used as a fall-back for legacy browsers that don't support the modern HTML5 APIs _Server-Sent Events_ and _WebSockets_.

=== Server-Sent Events ===

Before diving into WebSockets protocol lets get familiar with the standardized way of implementing  Server-Sent Events. W3C introduces new browsers API and - http://dev.w3.org/html5/eventsource/[+EventSource+] object. SSE allows to subscribe to remote server events arriving in the form of DOM events. The following code snippet shows the JavaScript code that can be used in a Web browser.

[source,javascript]
-----------------------------------------------------
include::include/sse_api_example.js[]
-----------------------------------------------------

<1> Create new +EventSource+ object. At this point the browser will sends the +GET+ request to the specified server-side endpoint to register itself on the server
<2> Add handlers for the +open+ and +error+ events
<3> Handle messages in +create+ events
<4> Handle messages in +update+ events

Using SSE is a good technique for the use cases when the client doesn't need to send the data to the server. In the above example the server sends two types of events +create+ and +update+ to notify subscribed clients about changing information about donation data so connected clients can monitor fund-raising process. We can create as many named-events as we want.
This technique is still HTTP-based, and it requires the server's support of a combination of HTTP 1.1 keep-alive connections and the `text/event-stream` content type. The overhead is minimal - instead of hundreds of bytes, the server sends only tens of bytes.

=== Introducing WebSockets

WebSockets is a bi-directional full-duplex socket-based protocol. The idea behind WebSockets is straightforward:

- Establish a socket connection between the client and the server using HTTP for the initial handshake.
- Switch the communication protocol from HTTP to direct socket-based protocol
- Send messages in both directions simultaneously (full duplex).
- Send messages independently. No request-response model. Both the server and the client can initiate data transmission which enables real server-push
- Accordungly, both the server and the client can initiate  disconnect.

We will explain each of this statements later in this chapter while introducing WebSocket API.

====  IETF RFC 6455 Protocol ====

WebSocket introduces the new protocol URI's: `ws` and `wss` for secured web-socket connection.



==== WebSockets Interface ====

To define an abstract Web socket interface the expert group uses http://en.wikipedia.org/wiki/Interface_description_language[Interface Description Language]

[source,java]
----------------------------------------------------------------------
include::include/ws_interface.il[]
----------------------------------------------------------------------

<1> The constructor requires an endpoint URI and optional sub-protocols name.

===== Client-Side API =====

After the introduction of the WebSockets interface lets see how the client's JavaScript can use it.

[source,javascript]
----------------------------------------------------------------------
include::include/ws_api_example.js[]
----------------------------------------------------------------------

<1> Check if the +WebSocket+ object is supported by the browser.
<2> Instantiate the new +WebSocket+ object with passing endpoint URI as constructor parameter.
<3> Set event handlers for `open`, `message`, `close` events.
<4> `e.data` property of the message event contains the received message.
<5> handle closing connection ...
<6> ... and errors

===== WebSockets Handshake

Handshake upgrades the connection from HTTP to the WebSockets protocol. It's an upgrade to a message based communication. We will discuss messages (a.k.a. frames) later in this chapter. Why upgrading from HTTP instead of starting with the TCP as a protocol in the first place? The reason is that the WebSockets operates on the same ports (80 and 443) as HTTP and HTTPS do. It's an advantage because all ports under 1024 are _privileged_, and they are  handled differently than non privileged ones.

For instance, on Linux systems only the user with _root_ privileges can create a socket on such ports. WebSockets use the same port as HTTP/HTTPS and it make this much more interesting. Another example would be the Flash Player socket policy system that will attempt to connect to port 843 to get the authorization information.

We have to tunnel our communication through the HTTP because arbitrary socket connections may not be allowed by the various firewalls for security or scalability reasons. In most of the cases, HTTP connections via ports 80 or 443 are allowed where the TCP socket connections are not. Also many corporate networks only allow certain ports outgoing. And HTTP/HTTPS ports are usually included in so called _white lists_.

The protocol upgrade is initiated by the client request, which also transmits a special key with the upgrade request. The server processes this request and send back a confirmation for the upgrade. This ensures that a WebSocket connection cannot be established with an endpoint that is not aware of the WebSockets protocol. Here is what the handshake looks can like in the client's request:

----------------------------------------------------------------------

    GET HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: echo.websocket.org
    Origin: http://www.websocket.org
    Sec-WebSocket-Key: i9ri+AfOgSsKwUlmLjIkGA==
    Sec-WebSocket-Version: 13

----------------------------------------------------------------------

This client sends the +GET+ request for the protocol upgrade. The +Sec-WebSocket_Key+ is just a set of random bytes. The server takes these bytes and appends to it a special Global Unique Identifier (GUID) string `258EAFA5-E914-47DA-95CA-C5AB0DC85B11`, then creates theSecure Hash Algorithm +SHA1+ hash from it followed by the _base64_ encoding. The resulting string of bytes needs to be used by both the server and the client, and it's unlikely that this string will be used by the network endpoints that do not understand the WebSockets protocol. Then this value would be copieded in the `Sec-WebSocket-Accept` header field. When the server has computed the value it can send the response back confirming the protocol upgrade.

----------------------------------------------------------------------

    HTTP/1.1 101 Web Socket Protocol Handshake
    Upgrade: WebSocket
    Connection: Upgrade
    Sec-WebSocket-Accept: Qz9Mp4/YtIjPccdpbvFEm17G8bs=
    Access-Control-Allow-Origin: http://www.websocket.org

----------------------------------------------------------------------

The WebSockets protocol uses the `400 Bad Request` error to signal the missing upgrade. The handshake can also include a protocol request and the WebSocket version information but you can't include arbitrary other headers. We can't transmit the authorization information. There are two ways around this. You can either transmit the authorization information as the <vik> first request (e.g. unique `clientId` can be passed as part of HTTP response header or HTML wrapper) or put it into the URL as a query parameter during initial handshake. Let me demonstrate it with following example.

[source,javascript]
----------------------------------------------------------------------
var clientId = AppContext.getClientId();                        // <1>
ws = new WebSocket("ws://www.websocket.org/echo/"+clientID); // <2>

----------------------------------------------------------------------

<1> Here we're getting clientId value from `AppContext` singleton
<2> We're connecting to WebSockets endpoint with extra URI parameter which would be stored on server for future interactions.

Because WebSockets protocol creates bi-directional (socket-to-socket) connection server has access to conversation session associated with the new web socket connection. This session can be associated with clientId and stored on server.

</vik>

****

NOTE: There is no limit to the number of established WebSocket connections a client can have with a single remote host.  Servers can refuse to accept connections from hosts/IP addresses with an excessive number of existing connections or disconnect resource-hogging connections in case of high data load.

****

===== The WebSocket frame anatomy =====

In this section we're going to explore how the WebSocket data transfer works. The WebSocket is not a stream based protocol like TCP - it's message based. The difference is that with TCP a program sends the bytes and has to ensure that the end of a message can be recognized.
The WebSocket specification makes it easier because it puts a frame around everything. It's easy to do  from the JavaScript side, but it's harder to handle on the server side <vik>since your server-side</vik> code needs to wrap everything in frames. The frame can look like this:

----------------------------------------------------------------------

+-+-+-+-+-------+-+-------------+-------------------------------+
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-------+-+-------------+-------------------------------+
|F|R|R|R| opcode|M| Payload len |    Extended payload length    |
|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
|N|V|V|V|       |S|             |   (if payload len==126/127)   |
| |1|2|3|       |K|             |                               |
+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
|     Extended payload length continued, if payload len == 127  |
+ - - - - - - - - - - - - - - - +-------------------------------+
|                               |Masking-key, if MASK set to 1  |
+-------------------------------+-------------------------------+
| Masking-key (continued)       |          Payload Data         |
+-------------------------------- - - - - - - - - - - - - - - - +
:                     Payload Data continued ...                :
+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                     Payload Data continued ...                |
+---------------------------------------------------------------+

----------------------------------------------------------------------

- `FIN` (1 bit)

This bit indicates if this frame is the final frame that makes up the message. Most of the time the message fits into a single frame and this bit will always be set.

- `RSV1`, `RSV2`, `RSV3` (1 bit each)

These bits are the reserved for future protocol changes and improvements. They must contain zeros as they are not being used at this time.

* `opcode` (4 bits)

.The frame type is defined using opcode. Here most used opcodes:

** `0x00` This frame continues the payload from the last.
** `0x01` This frame includes utf-8 text data.
** `0x02` This frame includes binary data.
** `0x08` This frame terminates the connection
** `0x09` This frame is a Ping.
** `0x10` This frame is a Pong.


- `mask` (1 bit)

This indicates if the frame is masked.

****

NOTE: The client must mask all the frames being sent to the server. The server must close the connection upon receiving a frame that is not masked. The server must not mask any frames that it sends to the client.  The client must close a connection if it detects a masked frame. In that case of such error, client or server can send `Close` frame with 1002 status code - protocol error.

****

* `payload_len` (7 bits, 7+16 bits, or 7+64 bits)

The length of the payload. WebSocket frames come in the following length brackets:
   ** 0-125 indicate the length of the payload.
   ** 126 means that the following two bytes indicate the length.
   ** 127 means the next 8 bytes indicate the length.

* `masking-key` (32 bits)

This key is used to _XOR_ the payload with.
<vik>
* `payload`

This indicates actual masked data. The length of block is defined in the `payload_len` bits.

</vik>
[quote]
____
more TBD
____

===== The Heartbeats =====

Certain things like <vik> transparent and explicit proxy servers or content-filtering hardware </vik> can terminate the idle connections or a remote side could go down. Only on  the next send your program can realize that something went wrong. With WebSockets the browser can send the _ping_ opcode `0x9` at any time to ask the other side to _pong_ back (the opcode `0xA`).

Pings can be sent whenever required, but a pong may sent at server's discretion. If an endpoint receives a Ping frame and has not yet sent Pong frame(s) in response to the previous Ping frame(s), the endpoint can elect to send a Pong frame for only the most recently processed Ping frame. The Ping frame may contain the application data (can be up to 125 bytes) and Pong must have identical data in message body.

There is no Javascript API to send Ping frames or receive Pongs http://www.whatwg.org/specs/web-apps/current-work/multipage/network.html#ping-and-pong-frames[frames]. This is either supported by your browser, or not. http://www.w3.org/Bugs/Public/show_bug.cgi?id=13104[There is also no API] to enable, configure or detect whether the browser supports and is using Ping/Pong frames.

[quote]
____
_TODO_
- Client-side frameworks
- Server-side API
____

=== WebSocket Use Cases

WebSockets really shine with following applications:

- Live trading/auctions/sports notifications
- Controlling medical equipment over the web
- Chat applications
- Multi-player online games
- Real-time updates in social streams

For the "Save Sick Child" application we're going to use WebSockets to implement an online auction communication layer. The goal is to let individuals and businesses purchase hand-made crafts and arts made by the children. All proceeds will go to help sick children.

==== Protocols Considerations for Enterprise Applications

The downside: WebSockets specification gives you only the transport, but it doesn't include the application-level protocol. Developers need to invent the application-specific text or binary protocols. For example, the auction bid has to be presented in a form agreed upon by all application modules. Let's discuss our options from protocol modeling perspective.

- SOAP, XML, XSD
- REST, JSON, CSV
- http://code.google.com/p/protobuf-js/[ProtoBuff for js], http://thrift.apache.org/[Apache Thrift]

_TODO_

=== WebSockets and Proxies

HTTP always supported upgrades, but unfortunately many proxies seem to have ignored that part of the specification. The main reason for that probably is that until WebSockets came around no one was actually using the Upgrade flag.

=== WebSockets and HTTP 2.0

[quote, Chief Product Architect at Akamai, Stephen Ludin]
____
"I use the metaphor of hammers and screwdrivers. Both tools are indispensable in my workshop...

Use the right tool for the job.
In the case of page and object delivery use SPDY.
In the case of lightweight or streaming data delivery look to WebSocket."

source: https://blogs.akamai.com/2012/07/spdy-and-websocket-support-at-akamai.html
____

- http 2.0, spdy, websockets
- framed protocols (describe frames)
