= Chapter 2. Advanced Introduction to JavaScript

This chapter is dedicated to the JavaScript programming language. Our challenging goal is ``From Zero to Hero in 50 pages''. While in the future chapters you'll see how JavaScript frameworks can greatly minimize the amount of the JavaScript code that you need to write manually, you still need to understand the language itself.

This chapter starts with basics of the language, but then it quickly progresses to such advanced topics
as prototypal inheritance, callbacks and closures. If you prefer more fundamental and detail-oriented way of learning programming languages, read the book ``Modern JavaScript. Develop and Design'' by Larry Ullman
or ``JavaScript: The Definite Guide'', Sixth Edition by David Flanagan.

Besides the JavaScript coverage this chapter includes a section on the tools (IDEs, debuggers, Web inspectors et al.) that will make your development process more productive.
In Chapter 3 we'll start working on the first implementation of the Web site "Save Sick
Child", which will include some JavaScript code.

=== JavaScript: A Brief History

The JavaScript programming language was designed in 1995 by Brendan Eich, who was working for Netscape Communication Corporation at the time. His goal was to allow developers create more interactive Web pages. Initially the name of this language was Mocha, then LiveScript, and finally Netscape agreed with Sun Microsystems, creator of Java (another new at the time language) to rename it to
JavaScript.

A year later, the language was given to an international standards body called ECMA, which formalized the language into ECMAScript standard so that other browser vendors could create their implementation of this standard. ActionScript is a good example of another popular dialect of ECMAScript.

To learn more about the history of JavaScript from the source watch the Brendan Eich’s presentation
http://www.youtube.com/watch?v=Rj49rmc01Hs[``JavaScript at 17''] at O’Reilly’s conference Fluent 2012.

Although the vast majority of today's JavaScript code is being executed by the Web browsers some third-party tools also include JavaScript engines. For example, Google’s V8 JavaScript engine is used not only in the Chrome browser, but it's a server-side way to run the code written in JavaScript framework
node.js. Using the same programming language on the client and the server is the main selling point of node.js. Oracle’s Java Development Kit (JDK) 8 includes the JavaScript engine Nashorn that can run on both the server and the client computers.

In the 90th, JavaScript was considered a second class language used mainly for prettifying Web pages. In the beginning of the 21st Century the techniques known as AJAX (described in Chapter 4) made a significant
impact to the way Web pages were built. With AJAX, the specific content inside the Web page could be updated without the need to make a full page refresh. Think of Google's gmail that inserts just one line at the top of your input box when new email arrives - it doesn't re-retrieve the entire content of your inbox from the server.

AJAX gave a second birth to JavaScript. But the vendors of Web browsers were no eager to implement the latest specifications of ECMAScript. Browsers’ incompatibility and lack of good development tools  prevented JavaScript to become the language of choice for Web applications. Let’s not forget about the ubiquitous Flash Player – an excellent VM supported by all Web browsers. Rich Internet Applications written in ActionScript were compiled into the byte code and executed by Flash Player on the user’s machine inside the Web browser.

If AJAX saved JavaScript, then rapid proliferation of tablets and smartphones made it really hot. Today's mobile devices come equipped with modern Web browsers and in the mobile world there is no need to make sure that your Web application will work in the 12 year old Internet Explorer 6. Adobe's decision to stop supporting Flash Player in the mobile Web browsers is yet another reason to turn to JavaScript if your Web application has to be accessed from smartphones or tablets. The ECMASript, 5th Edition has been
published in 2009 and is currently supported by all modern Web browsers. If you are interested in discovering if specific features of ECMAScript 5 are supported by a particular Web browser, check the latest version of the http://kangax.github.com/es5-compat-table/#[ECMAScript 5
compatibility table]. At the time of this writing the snapshot of the Chrome Browser v. 22 looks as in Figure 2-1 below:

image:fig_02_01.jpg[image]

Figure 2-1. ECMAScript 5 Compatibility Sample Chart

JavaScript became the lowest common denominator available on thousands of different devices. Yes, the JavaScript engines are not exactly the same on thousands devices that people use to login to Facebook,
but they are pretty close, and using some of the JavaScript frameworks spare you from worrying about their incompatibilities.

JavaScript is an interpreted language that arrives to the place of execution as text. The JavaScript engine optimizes and compiles the code before the execution. If the JavaScript engine is a part of a Web page, the browser will load and execute the JavaScript code embedded or referenced between the HTML tags `<script>` and `</script>`. JavaScript was originally created for Web browsers, which were supposed to display whatever content has successfully arrived. What if an image has not arrived from the server? You’ll see a broken image icon. What if not all JavaScript code has arrived to the browser? Well, the engine will try to execute whatever is available. The end users may appreciate such browser's forgiveness when at least some content is available, but the software developers should be ready to spend more time debugging (in multiple browsers) the errors that could have been caught by compilers in other programming languages.


=== Why Declaring JavaScript Variables


JavaScript is a weakly typed language hence the developers don’t have a luxury of strong compiler's help that Java or C# developers enjoy. This is easily explainable. Imagine that if in Java or C# instead of declaring variables of specific data types everything would be of type Object, and you could assign to it any value – a string, a number, or a custom object Person. This would substantially complicate the ability of the compiler to weed out all possible errors. You don’t need to declare variables in JavaScript – just assign a value and the JavaScript engine will figure out the proper type during the execution of your code.For example, the variable named +girlfriend+ will have a data type of +String+:

----
girlfriendName=“Mary”;
----

Since I haven’t used the keyword +var+ in front of +girlfriend+, this variable will have the global scope. Variables declared with +var+ inside functions are local. Consider the following function declaration:

[source,javascript]
----
function addPersonalInfo(){
   var address ="123 Main Street";      // local String variable
   age=25;                              // global Number variable
   var isMarried = true;                // local boolean variable
       isMarried = "don't remember";    // now it's of String type
}
----

The variables +address+ and +isMarried+ are visible only inside the function +addPersonalInfo()+. The variable +age+ becomes global because of omission of the keyword +var+. In Chapter 3, you'll see an example of how to limit the scope of the variables to avoid polluting the global name space.

The variable +isMarried+ changes its type from +Boolean+ to +String+ during the execution of the above script, and JavaScript engine won't complain assuming that the programmer knows what she’s doing. So be ready for the run-time surprises and allocate a lot more time for testing comparing to compiled languages.

Yet another moving part is the JavaScript engine where your code will run. Unless you are developing for strictly controlled enterprise environment you can't assume that the end-user will have the same runtime as yours. This is yet another reason to test your code in multiple Web browsers.

=== Which IDE to Use

Selecting an Integrated Development Environment (IDE) that supports JavaScript is a matter of your personal preference. Since there is no compilation stage and most of your debugging will be done using the Web browser tools, picking a text editor that supports syntax highlighting is all that most developers need. For example, there is an excellent commercial text editor http://www.sublimetext.com[Sublime Text 2]. Among many programming languages this editor understands the keywords of HTML, CSS, and JavaScript, and it offers not only syntax highlighting, context sensitive help, and auto-complete too.

If you are coming from the Java background, the chances are that you are familiar with free and open sourced Eclipse IDE. In this case install the Eclipse plugin https://www.ebayopensource.org/index.php/VJET/HomePage[VJET by eBay].

Oracle's IDE http://wiki.netbeans.org/HTML5[NetBeans 7.3] and above support HTML5 and JavaScript development and includes JavaScript debugger that allows your code to connect to the Web browser, but you are debugging inside the IDE. If you prefer Microsoft technologies, they offer excellent JavaScript support in Visual Studio 2012.

In this book we'll use an Eclipse-based http://aptana.com[Aptana Studio 3 IDE]. Aptana Studio is available free of charge.  Aptana Studio comes with embedded Web Server so you can test your JavaScript code without the need to start any additional software. In this chapter we’ll use Aptana Studio IDE to
illustrate the features of JavaScript, and in the next chapter you'll be working with a number of Aptana projects that will lead you through the development of the first version of our Save Sick Child Web application.

For the real world development we recommend using a commercial http://www.jetbrains.com/webstorm[IDE WebStorm] from JetBrains. In addition to smart context sensitive help, auto-complete, and syntax
highlighting it offers HTML5 templates, a code coverage feature for unit testing that identifies the code fragment that haven't been tested. All of the editors and IDEs listed here are either available for free or are priced in the area of $60 USD.Try them all and pick the one that best fits your coding habits.


=== Getting Familiar with Aptana IDE


Download and install Aptana Studio 3 from http://aptana.com[http://aptana.com]. Start Aptana and close the start page it displays by clicking on the little X on the tab. Then customize the color theme of this IDE by clicking the rainbow-colored circle on its toolbar. We usually select the theme called Eclipse. After the first start of Aptana you’ll see the message on the left side that reads ``There are no projects in your workspace. To get started, please create or import an existing one.''


If you want to start playing with the code samples that come with this book, click on the button Import Project, select the General | Archive file. Find the zip file you'd like to use, e.g. chapter2.zip, and press Finish. The project from the selected zip file will be imported into the Aptana's _workspace_, which is nothing more than a folder on the disk where the source code will reside. When you work in Aptana IDE you see a set of _views_ (panels). This set is called _perspective_. For Web projects Aptana uses Web perspective, which is indicated at the top right corner. Pressing the icon with a little pus sign at the top right allows to open another perspective with its own set of views.

Let's get started with creating a project from scratch by pressing the button Create Project on the left. You could have also created a new Web Project using the File menu. On the next window you'll need to select a wizard, and we'll be always working with Web Projects throughout this book. The next window will offer you to select a project template - let's stick to the simplest one - Default Project. Name it  MyFirstProject.

To add an HTML file to this project select the menu File | New From Template | HTML | HTML5 Template. Aptana will offer you new_file.html the name of this file - no need to change it for now. Just press finish and you'll see a window similar to the one shown on Figure 2-2.

image:fig_02_02.jpg[image]

Figure 2-2. Aptana IDE with one HTML5 file

Right-click on the new_file.html and select the menu Run as JavaScript Web project. Don't get upset that there is no JavaScript code there yet - we'll add it pretty soon. Aptana starts its built-in Web server that by default runs on the port 8020 (it's configurable in Aptana Preferences). The Web browser opens up and displays the page that looks like the one in Figure 2-3. Aptana has used its default template to generate HTML file. The template can be changed to your liking, and you can read about it in Aptana's documentation at http://bitly.com/LRqRdU[http://bitly.com/LRqRdU].

image:fig_02_03.jpg[image]

Figure 2-2. Running MyFirstProject

=== Adding JavaScript to HTML

If your JavaScript is a part of HTML document, typically, you'll be adding your `<script>` tags at the end of HTML file. The reason is simple - your JavaScript code may be manipulating with HTML elements, and you want them to exist by the time the script runs. The other way to ensure that the code is not running unless the Web page has loaded is by catching window's +load+ event, and you'll see such example later in this chapter in the section on browser's events. Some JavaScript frameworks may have their own approach to dealing with HTML content and in Chapter 7 you'll see that the main HTML file of the Web application written with Ext JS framework has `<script>` tags followed by the empty `<body>` tags. But let's keep things simple for now.

Add the following fragment at the very end (right above the closing `</body>` tag) of the new_file.html from Figure 2-2.

[source,html]
----
<script>
   alert("Hello from JavaScript");
</script>
----

Run the new_file.html in Aptana and you'll see the following output in your Web browser:

image:fig_02_04.jpg[image]

Figure 2-4. Running MyFirstProject with JavaScript at the bottom

Note that the Alert popup box is shown on top of the Web page that already rendered all of its HTML components. Now move the above code up to the end of the `<head>` section and re-run new_file.html. The picture is different now - the Alert box is shown before the HTML rendering is complete.

image:fig_02_05.jpg[image]

Figure 2-5. Running MyFirstProject with JavaScript at the top

In this simple example this doesn't cause any malfunctioning of the code, but if our JavaScript would need to manipulate with HTML elements, we'd run into issues of accessing non-existent components. 

TIP: Beside simple Alert box, JavaScript has Confirm and Prompt boxes, which allow asking OK/Cancel type of questions or require some input from the user. 


=== Debugging JavaScript in Web Browsers


The best way to learn any program is to run it step by step through a debugger. While some people appreciate using debuggers offered by Aptana, NetBeans, or Visual Studio, we prefer to debug using great tools offered by the Web browsers. Here's what you've got:

* Firefox: FireBug add-on
* Chrome: Developer Tools
* Internet Explorer: F12 Developer Tools
* Safari: the menu Develop
* Opera Dragonfly

We'll be doing most of the debugging in FireBug or Chrome Developer Tools. Both of them are very helpful and easy to use. To get FireBug go to http://www.getfirebug.com[www.getfirebug.com] and press the red button Install Firebug and follow the instructions. In Firefox, open the Firebug panel from the menu View.

image:fig_02_06.jpg[image]

Figure 2-6. FireBug Console

Select the Console option on the Firebug toolbar and enter +alert("Hello from JavaScript")+ after the >>> sign and you'll see the Alert box. To enter multi-line JavaScript code press the little circle with a caret at the bottom right corner and FireBug will open a panel on the right, where you can enter and run your JavaScript code.
    
This was probably the last example where we used the Alert() popup box for debugging purposes. All JavaScript debuggers support the +console.log()+ for printing debug information.  Consider the following example that illustrate strict equality operator ===. Yes, it's three equal signs in a row. This operator evaluates to true if the values are equal and the data types are the same.

[source,javascript]
----
var age=25;

var ageStr="25";

if (age==ageStr){
  console.log("The values of age and ageStr are equal");
}

if (age===ageStr){
 console.log("The values of age and ageStr are strictly equal");
} else{
 console.log ("The values of age and ageStr are not strictly equal");
}
----

Running this code in the FireBug console produces the following output:

image:fig_02_07.jpg[image]

Figure 2-7. Using console.log() for debugging

TIP: You can also use +console.info()+, +console.debug()+, and +console.error()+ so debuggers may  highlight the output with different colors or mark with different icons.

=== JavaScript Functions. Gentle Introduction

Now comes the chicken or the egg dilemma. What should we explain first - functions or objects? Understanding of objects is needed for some of the function code samples and visa versa. We'll start with simple function use cases, but will be switching to objects as needed.

Many of the readers can have experience with object-oriented languages like Java or C#, where classes can include _methods_ implementing required functionality. Then these methods can be invoked with or without instantiation of the objects. If a JavaScript object includes functions they are also called _methods_. But JavaScript functions don't have to belong to an object. You can just declare a function and invoke it. Just like this:

[source,javascript]
----
//Function declaration
function calcTax (income, dependents){
   var tax; 
   // Do stuff here
   return tax;
}

//Function invocation
calcTax(50000, 2);    
var myTax = calcTax(50000,2);
----

Please note that the data types of the function parameters +income+ and +dependents+ are not specified. We can only guess that they are numbers based on their names. If a software developer won't bother giving meaningful names to function parameters, the code becomes difficult to read. After the function +calcTax()+ is invoked and complete, the variable +myTax+ will have the value returned by the function.
In the above code sample the JavaScript engine will not evaluate the function +calcTax()+ until it's actually invoked. 

Another important thing to notice is that our function has a name +calcTax+. But this is not always the case - JavaScript allows functions to be _anonymous_. If you see the line of code where the keyword +function+ is preceded by any other character this is not a function declaration, but a function expression.
Consider the following variation of the tax calculation sample:

[source,javascript]
----
//Function expression
var doTax=function (income, dependents){
	//do stuff here
   return tax;
}

//Function invocation
var myTax=doTax(50000,2);
----

The +function+ keyword is being used in the expression - we assign the anonymous function to the variable +doTax+. After this assignment the text of the function is assigned to the variable +doTax+. It's important to understand that even though the code of this anonymous function ends with +return tax;+ actually, the tax calculation and return of its value is not happening until the +doTax()+ is invoked. Now the function is evaluated and the variable +myTax+ will get the returned value. 

Yet another example of a function expression is when it's placed inside the _grouping operator_ - parentheses as shown below:

[source,javascript]
----
(function calcTax (income, dependents){
   // Do stuff here
});
----

Another interesting concept of JavaScript is self-executing functions. Adding an extra pair of parentheses will cause the function expression located in the first set of parentheses to be executed right away.

[source,javascript]
----
(function calcTax (income, dependents){
   // Do stuff here
})();
----

The first set of parentheses hides its internal code from the outside world creating a . Try to invoke +calcTax(50000,2)+ after this sealed code and you'll get an error - "calcTax is not defined". There is a way to expose some of the internal content of such a closure and you'll see it later in this chapter. 

=== JavaScript Objects. Gentle Introduction

JavaScript objects are simply unordered collections of properties. You can assign new or delete existing properties from the objects during the runtime whenever you please. In classical object oriented languages there are _classes_ and there are _objects_. For example, based on one Java a class you can create  multiple instances of its objects. 

[NOTE]
The ECMAScript 6 specification will include classes too, but since it's a work in progress we won't consider them as something useful in the today's world.   

In JavaScript you can create objects using one of the following methods:

* Using object literals
* Using +new Object()+ notation
* Using +Object.create()+
* Using _constructor functions_ and a +new+ operator.

[NOTE]
In JavaScript everything is an +Object+. Think of +Object+ as of a root of of the hierarchy of all objects used in your program. All your custom objects are descendants from +Object+.

==== Object Literals

The easiest way to create a JavaScript object is by using the object literal notation. The code sample below starts with a creation of an empty object. The second line creates an object with one property +salary+ and assigns the value of 50000 to it. Finally, the instance of one more object pis created and the variable +person+ points at it.  

[source,javascript]
----
var t = {}             // create an instance of an empty object

var a = {salary: 50000}; // an instance with one property

// Store the data about Julia Roberts
var person = { lastName: ”Roberts”,
               firstName: ”Julia”, 
                     age: 42
             };
---- 

This object has three properties: +lastName+, +firstName+, and +age+. Note that in object literal notation the values of these properties are specify using colon. You can access the properties of this person using the dot notation, e.g. +person.LastName+. But JavaScript allows yet another way of accessing the object properties by using square bracket syntax, for example `person["lastName"]`. In the next code sample you'll see that using the square brackets is the only way to access the property.

[source, javascript]
----
 var person = {
       "last name": "Roberts",   
       firstName: "Julia",
             age: 42};

var herName=person.lastName;          // <1>  

herName=person["lastName"];           // <2>
console.error("Hello " + herName);    // <3>

person.salutation="Mrs. ";        

console.log("Hello "+ person.salutation + person["last name"]); // <4>

console.log("Hello "+ person.firstName);
----

<1> The object person doesn't have a property +lastName+
<2> Using and alternative way of referring to an object property 
<3> This will print "Hello undefined" 
<4> This will print "Hello Mrs. Roberts"
	

TIP: It's a good idea to keep handy a style guide of any programming language, and we know two of such documents for JavaScript. Google has published their version of JavaScript Style Guide at http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml[http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml]. A more detailed Airbnb JavaScript Style Guide is available as a github project at https://github.com/airbnb/javascript[https://github.com/airbnb/javascript].


Objects can contain other objects. If a property of an object literal is also an object, you just need to specify the value of this property in an extra pair of curly braces. For example, you can represent the telephone of a person as an object having two properties: the type and the number. The following code snippet adds a nested object to store a work phone as a _nested object_ inside the person's object. Run this code in the FireBug's console and it'll print "Call Julia at work 212-555-1212". 

[source, javascript]
----
var p = { lastName: "Roberts",
                firstName: "Julia", 
                age: 42,
                phone:{
                      type: "work",
                      numb: "212-555-1212"
                 }
            };
console.log("Call " + p.firstName + " at " + p.phone.type + " " + p.phone.numb );            
----

What if a person has more then one phone? We can change the name of the property +phone+ to +phones+ and instead store an array of objects. JavaScript arrays are surrounded by square brackets, and they are zero based. The following code snippet will print "Call Julia at home 718-211-8987".

[source, javascript]
----
var p = { lastName: "Roberts",
                firstName: "Julia", 
                age: 42,
                phones:[{
                      type: "work",
                      numb: "212-555-1212"
                 },
                 {
                      type: "home",
                      numb: "799-211-8987"

                 }]
            };
console.log("Call " + p.firstName + " at " + p.phones[1].type + " " + p.phones[1].numb );
----

===== Methods in Object Literals

Functions defined inside objects are called _methods_. Defining methods in object literals is similar to defining properties - provide a method name followed by a colon and the function declaration. The code snippet below declares a method `makeAppoyntment()` to our object literal. Finally, the line `p.makeAppointment();` invokes this new method, which will print the message on the console that Steven wants to see Julia and will call at so-and-so number.


[source, javascript]
----
var p = { lastName: "Roberts",
                firstName: "Julia", 
                age: 42,
                phones:[{
                      type: "work",
                      numb: "212-555-1212"
                 },
                 {
                      type: "home",
                      numb: "718-211-8987"

                 }],
                makeAppointment: function(){ 
                    console.log("Steven wants to see  " + this.firstName + 
                                 ". He'll call at " + this.phones[0].numb);
                }
            };
             
p.makeAppointment();
----



=== JavaScript and HTML Elements


After learning all these facts and techniques about the language you might be eager to see "the real use of JavaScript" – manipulating HTML elements of Web pages, which most of the people use JavaScript for. This
is correct, at least today. In this section we'll be doing exactly this – applying JavaScript code to HTML elements.

First let's consider the operations we need to be able to perform inside the Web page:

* Programmatically finding the required element by id, type, or a CSS class.
* Changing styles of the elements (show, hide, apply fonts and colors et al.)
* Processing events that may happen to HTML elements (+click+, +mouseover+ et al.)
* Dynamically adding or removing HTML elements from the page or changing their contents
* Communicating with the server side, e.g. form submission or making AJAX requests for some data from the server

You’ll need to understand how to perform these operations from JavaScript. Even if you’ll be using one of the popular frameworks, you'll be performing the same operations applying the syntax prescribed
by your framework of choice. So let's get started.

=== Styling Web Pages with CSS

CSS stands for Cascading Style Sheets. During the last 15 years several CSS specifications reached the level of Recommendation by W3C: CSS Level 1, 2, and 2.1. The latest CSS Level 3 (a.k.a. CSS3) adds new features to CSS 2.1 module by module, which are listed at
http://www.w3.org/Style/CSS/current-work[http://www.w3.org/Style/CSS/current-work]. Brief CSS tutorial and reference is located at http://www.w3schools.com/cssref/default.asp

You can include CSS into a Web page either by linking to separate files using the HTML tag `<link>` or by in-lining the styles with the tag `<style>`. For example, if CSS is located in the file `mystyles.css` in
the folder css add the following tag to HTML:

[source,html]
<link rel="stylesheet" type="text/css" href="css/mystyles.css" media="all">

The `<link>` tag allows specifying the media where specific css file has to be used. For example, you can have one CSS file for smartphones and another one for tablets. We’ll discuss this in detail in the section on media queries in Chapter 11.

You should put this tag in the section of your HTML before any JavaScript code to make sure that they
stiles are loaded before the content of the Web page.

Placing the `@import` attribute inside the `<style>` tag allows to include styles located elsewhere:

[source,html]
----
<style>
   @import url (css/contactus.css)
</style>
----

What’s the best way of including CSS in HTML? From one hand, keeping CSS in multiple files separately form HTML and JavaScript makes the code more readable and reusable. On the other hand, when if your Web site has
consists of many files, the Web browser will have to make multiple round trips to your server just to load the page, which can slow down the responsiveness of your Web application.
